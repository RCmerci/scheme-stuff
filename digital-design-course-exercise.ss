;;;make-wire
(define (make-wire)
  (let ((signal-value 0) (action-procedures '()))
    (define (get-signal-value)
      signal-value)
    (define (set-signal-value! value)
      (if (not (equal? value signal-value))
          (begin
            (set! signal-value value)
            (call-each action-procedures)
            'done)
          'done))
    (define (accept-action-procedure! proc)
      (set! action-procedures (cons proc action-procedures))
      (proc))
    (define (dispatch action)
      (cond ((equal? action 'get-signal)
             (get-signal-value))
            ((equal? action 'set-signal!)
             set-signal-value!)
            ((equal? action 'add-action!)
             accept-action-procedure!)
            (else
             (error "unknown operation -- WIRE" action))))
    dispatch))
(define (call-each actions)
  (if (not (null? actions))
      (begin
        ((car actions))
        (call-each (cdr actions)))
      'done))
;;; get-signal,set-signal!,add-action!
(define (get-signal wire)
  (wire 'get-signal))
(define (set-signal! wire value)
  ((wire 'set-signal!) value))
(define (add-action! wire proc)
  ((wire 'add-action!) proc))
;;;inverter,and-gate,or-gate
(define (inverter input output)
  (define (invert-input)
    (after-delay inverter-delay
                 (lambda ()
                   (set-signal! output
                                (logical-not (get-signal input))))))
  (add-action! input invert-input))
(define (and-gate input1 input2 output)
  (define (and-gate-action)
    (after-delay and-gate-delay
                 (lambda ()
                   (if (= 2 (+ (get-signal input1) (get-signal input2)))
                       (set-signal! output 1)
                       (set-signal! output 0)))))
  (add-action! input1 and-gate-action)
  (add-action! input2 and-gate-action))
(define (or-gate input1 input2 output)
  (define (or-gate-action)
    (after-delay or-gate-delay
                 (lambda ()
                   (if (= 0 (+ (get-signal input1) (get-signal input2)))
                       (set-signal! output 0)
                       (set-signal! output 1)))))
  (add-action! input1 or-gate-action)
  (add-action! input2 or-gate-action))
(define (logical-not value)
  (cond ((= value 0) 1)
        (else 0)))
(define (after-delay delay-time func)
  (add-to-agenda! agenda (+ (current-time agenda) delay-time) func))
;;;agenda的结构：(current-time (1 action-1 action-2 ...) (2 action-1 action-2 ...))
(define (make-agenda)
  (list 0))
(define (empty-agenda? agenda)
  (if (null? (cdr agenda))
      #t
      #f))
(define (get-segments agenda)
  (cdr agenda))
(define (set-segments! agenda segments)
  (set-cdr! agenda segments))
(define (empty-segments? segments);;;;;;useless function
  (if (null? (cdr segments))
      #t
      #f))
(define (empty-segment? segment)
  (if (null? (cdr segment))
      #t
      #f))
(define (get-first-segment agenda)
  (car (get-segments agenda)))
(define (get-first-not-empty-segment agenda)
  (let ((result (get-first-segment agenda)))
    (cond ((not (empty-segment? result))
           result)
          ((empty-agenda? agenda)
           (error "empty-agenda --get-first-not-empty-segment" agenda))
          (else
           (get-first-not-empty-segment (cdr agenda))))))
(define (first-agenda-item! agenda)
  (if (empty-agenda? agenda)
      'all-done
      (let ((segment (get-first-not-empty-segment agenda)))
        (let ((action (cadr segment)) (time (car segment)))
          (remove-first-agenda-item! segment)
          (if (empty-segment? segment)
              (remove-first-segment! agenda))
          (list action time)))))
(define (remove-first-agenda-item! segment)
  (set-cdr! segment (cddr segment)))
(define (remove-first-segment! agenda)
  (set-cdr! agenda (cddr agenda)))
(define (current-time agenda)
  (car agenda))
(define (set-current-time! agenda time)
  (set-car! agenda time))
(define (add-to-agenda! agenda time action)
  (define (search-agenda)
    (define (do-search the-segments last-one)
      (cond ((null? the-segments)
             (list 'last last-one))
            ((= time (caar the-segments))
             (list '= the-segments))
            ((< time (caar the-segments))
             (list '< the-segments))
            (else
             (do-search (cdr the-segments) the-segments))))
    (do-search (get-segments agenda) #f))
  (define (make-segment)
    (list time action))
  (define (insert-to-agenda! location type)
    (cond ((eq? type '=)
           (set-cdr! (car location) (cons action (cdar location))))
          ((eq? type '<)
           (let ((temp (car location)))
             (set-car! location (make-segment))
             (set-cdr! location (cons temp (cdr location)))))
          ((eq? type 'last)
           (if location
               (begin
                 (set-cdr! location (list (make-segment))))
               (set-cdr! agenda (list (make-segment)))))))
  (define (do-add)
    (let ((result (search-agenda)))
      (insert-to-agenda! (cadr result) (car result))))
  (do-add))
;;;;;;start~
(define inverter-delay 2)
(define and-gate-delay 3)
(define or-gate-delay 5)
(define agenda (make-agenda))
(define (start)
  (define (run)
    (if (empty-agenda? agenda)
        'all-done
        (begin
          (let ((action+time (first-agenda-item! agenda)))
            (set-current-time! agenda (cadr action+time))
            ( (car action+time))
            (run)))))
  (run))
(define (ob wire nickname)
  (define (do-ob)
    (display nickname)
    (display ":")
    (display (get-signal wire))
    (newline)
    (display "current-time:")
    (display (current-time agenda))
    (newline)
    (display "------------")
    (newline))
  (add-action! wire do-ob))
(define (ob-all wires wire-names)
  (if (null? wires)
      'done
      (begin
        (display (car wire-names))
        (display ":")
        (display (get-signal (car wires)))
        (newline)
        (ob-all (cdr wires) (cdr wire-names)))))

;;;;;;;;;;;;;以上是实现;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;以下是一些常用的门;;;;;;;;;;;;;;;;;;;
(define (4-and-gate in1 in2 in3 in4 out1)
  (let ((w1 (make-wire)) (w2 (make-wire)))
    (and-gate in1 in2 w1)
    (and-gate in3 in4 w2)
    (and-gate w1 w2 out1)))
(define (3-and-gate in1 in2 in3 out1)
  (let ((w1 (make-wire)))
    (and-gate in1 in2 w1)
    (and-gate w1 in3 out1)))
(define (4-or-gate in1 in2 in3 in4 out1)
  (let ((w1 (make-wire)) (w2 (make-wire)))
    (or-gate in1 in2 w1)
    (or-gate in3 in4 w2)
    (or-gate w1 w2 out1)))
(define (3-or-gate in1 in2 in3 out1)
  (let ((w1 (make-wire)))
    (or-gate in1 in2 w1)
    (or-gate w1 in3 out1)))
(define (2-and-not-gate in1 in2 out1)
  (let ((w1 (make-wire)))
    (and-gate in1 in2 w1)
    (inverter w1 out1)))
(define (2-or-not-gate in1 in2 out1)
  (let ((w1 (make-wire)))
    (or-gate in1 in2 w1)
    (inverter w1 out1)))
(define (3-and-not-gate in1 in2 in3 out1)
  (let ((w1 (make-wire)))
    (3-and-gate in1 in2 in3 w1)
    (inverter w1 out1)))
(define (3-or-not-gate in1 in2 in3 out1)
  (let ((w1 (make-wire)))
    (3-or-gate in1 in2 in3 w1)
    (inverter w1 out1)))
(define (4-and-not-gate in1 in2 in3 in4 out1)
  (let ((w1 (make-wire)))
    (4-and-gate in1 in2 in3 in4 w1)
    (inverter w1 out1)))
(define (4-or-not-gate in1 in2 in3 in4 out1)
  (let ((w1 (make-wire)))
    (4-or-gate in1 in2 in3 in4 w1)
    (inverter w1 out1)))
;38译码器
(define (74x138 in1 in2 in3 out1 out2 out3 out4 out5 out6 out7 out8)
  (let ((w4 (make-wire))
        (w5 (make-wire))
        (w6 (make-wire))
        (w7 (make-wire))
        (w8 (make-wire))
        (w9 (make-wire)))
    (inverter in1 w4)
    (inverter in2 w5)
    (inverter in3 w6)
    (inverter w4 w7)
    (inverter w5 w8)
    (inverter w6 w9)
    (3-and-gate w4 w5 w6 out1)
    (3-and-gate w5 w6 w7 out2)
    (3-and-gate w4 w6 w8 out3)
    (3-and-gate w6 w7 w8 out4)
    (3-and-gate w4 w5 w9 out5)
    (3-and-gate w5 w7 w9 out6)
    (3-and-gate w4 w8 w9 out7)
    (3-and-gate w7 w8 w9 out8)))

;;;;;;;;;;;examples;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(define agenda (make-agenda))
;(define w1 (make-wire))
;(define w2 (make-wire))
;(ob w1 'wire-1')
;(inverter w1 w2)
;(get-signal w1)
;(set-signal! w1 1)
;(start)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define agenda (make-agenda))


(define data1 (make-wire))
(define data2 (make-wire))
(define data3 (make-wire))
(define data4 (make-wire))
(define data5 (make-wire))
(define data6 (make-wire))
(define data7 (make-wire))
(define data8 (make-wire))
(define ctrl1 (make-wire))
(define ctrl2 (make-wire))
(define ctrl3 (make-wire))
(define out1 (make-wire))
(define out2 (make-wire))
(define out3 (make-wire))
(define out4 (make-wire))
(define out5 (make-wire))
(define out6 (make-wire))
(define out7 (make-wire))
(define out8 (make-wire))
(ob out1 "out1")
(ob out2 "out2")
(ob out3 "out3")
(ob out4 "out4")
(ob out5 "out5")
(ob out6 "out6")
(ob out7 "out7")
(ob out8 "out8")
(define (observe-all)
  (ob-all `(,data1 ,data2 ,data3 ,data4 ,data5 ,data6 ,data7 ,data8 ,ctrl1 ,ctrl2 ,ctrl3 ,out1 ,out2 ,out3 ,out4 ,out5 ,out6 ,out7 ,out8)  '(data1 data2 data3 data4 data5 data6 data7 data8 ctrl1 ctrl2 ctrl3 out1 out2 out3 out4 out5 out6 out7 out8)))
(define (observe-all-graphics)
  (define (num-to-graph num)
    (if (= num 0)
        "_"
        "—"))
  (define (do-display wires)
    (if (null? wires)
        (newline)
        (begin
          (display (num-to-graph (get-signal (car wires))))
          (do-display (cdr wires)))))
  (define (do-it)
    (do-display `(,data1 ,data2 ,data3 ,data4 ,data5 ,data6 ,data7 ,data8))
    (do-display `(,ctrl1 ,ctrl2 ,ctrl3))
    (do-display `(,out1 ,out2 ,out3 ,out4 ,out5 ,out6 ,out7 ,out8)))
  (newline)
  (do-it))
(define (a-unit data in38-1 in38-2 in38-3 in38-4 in38-5 in38-6 in38-7 in38-8 o1 o2 o3 o4 o5 o6 o7 o8)
  (and-gate data in38-1 o1)
  (and-gate data in38-2 o2)
  (and-gate data in38-3 o3)
  (and-gate data in38-4 o4)
  (and-gate data in38-5 o5)
  (and-gate data in38-6 o6)
  (and-gate data in38-7 o7)
  (and-gate data in38-8 o8))
(define (8-or-gate i1 i2 i3 i4 i5 i6 i7 i8 o1)
  (let ((w1 (make-wire)) (w2 (make-wire)))
    (4-or-gate i1 i2 i3 i4 w1)
    (4-or-gate i5 i6 i7 i8 w2)
    (or-gate w1 w2 o1)))

(define-syntax define-64-w
  (syntax-rules ()
    ((_)
     (begin
       ))))
(define-syntax define-8-o38-
  (syntax-rules ()
    ((_)
     (begin
       (define o38-1 (make-wire))
       (define o38-2 (make-wire))
       (define o38-3 (make-wire))
       (define o38-4 (make-wire))
       (define o38-5 (make-wire))
       (define o38-6 (make-wire))
       (define o38-7 (make-wire))
       (define o38-8 (make-wire))))))
(define-syntax define-8-w
  (syntax-rules ()
    ((_)
     (begin
       (define w1 (make-wire))
       (define w2 (make-wire))
       (define w3 (make-wire))
       (define w4 (make-wire))
       (define w5 (make-wire))
       (define w6 (make-wire))
       (define w7 (make-wire))
       (define w8 (make-wire))))))

(define (finally-finish)
  (let ((o38-1 (make-wire)) (o38-2 (make-wire)) (o38-3 (make-wire)) (o38-4 (make-wire)) (o38-5 (make-wire)) (o38-6 (make-wire)) (o38-7 (make-wire)) (o38-8 (make-wire)))
;    (define-64-w)
    (define wire1 (make-wire))
    (define wire2 (make-wire))
    (define wire3 (make-wire))
    (define wire4 (make-wire))
    (define wire5 (make-wire))
    (define wire6 (make-wire))
    (define wire7 (make-wire))
    (define wire8 (make-wire))
    (define wire9 (make-wire))
    (define wire10 (make-wire))
    (define wire11 (make-wire))
    (define wire12 (make-wire))
    (define wire13 (make-wire))
    (define wire14 (make-wire))
    (define wire15 (make-wire))
    (define wire16 (make-wire))
    (define wire17 (make-wire))
    (define wire18 (make-wire))
    (define wire19 (make-wire))
    (define wire20 (make-wire))
    (define wire21 (make-wire))
    (define wire22 (make-wire))
    (define wire23 (make-wire))
    (define wire24 (make-wire))
    (define wire25 (make-wire))
    (define wire26 (make-wire))
    (define wire27 (make-wire))
    (define wire28 (make-wire))
    (define wire29 (make-wire))
    (define wire30 (make-wire))
    (define wire31 (make-wire))
    (define wire32 (make-wire))
    (define wire33 (make-wire))
    (define wire34 (make-wire))
    (define wire35 (make-wire))
    (define wire36 (make-wire))
    (define wire37 (make-wire))
    (define wire38 (make-wire))
    (define wire39 (make-wire))
    (define wire40 (make-wire))
    (define wire41 (make-wire))
    (define wire42 (make-wire))
    (define wire43 (make-wire))
    (define wire44 (make-wire))
    (define wire45 (make-wire))
    (define wire46 (make-wire))
    (define wire47 (make-wire))
    (define wire48 (make-wire))
    (define wire49 (make-wire))
    (define wire50 (make-wire))
    (define wire51 (make-wire))
    (define wire52 (make-wire))
    (define wire53 (make-wire))
    (define wire54 (make-wire))
    (define wire55 (make-wire))
    (define wire56 (make-wire))
    (define wire57 (make-wire))
    (define wire58 (make-wire))
    (define wire59 (make-wire))
    (define wire60 (make-wire))
    (define wire61 (make-wire))
    (define wire62 (make-wire))
    (define wire63 (make-wire))
    (define wire64 (make-wire))
(74x138 ctrl3 ctrl2 ctrl1 o38-1 o38-2 o38-3 o38-4 o38-5 o38-6 o38-7 o38-8)
    (a-unit data1 o38-1 o38-2 o38-3 o38-4 o38-5 o38-6 o38-7 o38-8 wire1 wire2 wire3 wire4 wire5 wire6 wire7 wire8)
    (a-unit data2 o38-8 o38-1 o38-2 o38-3 o38-4 o38-5 o38-6 o38-7 wire9 wire10 wire11 wire12 wire13 wire14 wire15 wire16)
    (a-unit data3 o38-7 o38-8 o38-1 o38-2 o38-3 o38-4 o38-5 o38-6 wire17 wire18 wire19 wire20 wire21 wire22 wire23 wire24)
    (a-unit data4 o38-6 o38-7 o38-8 o38-1 o38-2 o38-3 o38-4 o38-5 wire25 wire26 wire27 wire28 wire29 wire30 wire31 wire32)
    (a-unit data5 o38-5 o38-6 o38-7 o38-8 o38-1 o38-2 o38-3 o38-4 wire33 wire34 wire35 wire36 wire37 wire38 wire39 wire40)
    (a-unit data6 o38-4 o38-5 o38-6 o38-7 o38-8 o38-1 o38-2 o38-3 wire41 wire42 wire43 wire44 wire45 wire46 wire47 wire48)
    (a-unit data7 o38-3 o38-4 o38-5 o38-6 o38-7 o38-8 o38-1 o38-2 wire49 wire50 wire51 wire52 wire53 wire54 wire55 wire56)
    (a-unit data8 o38-2 o38-3 o38-4 o38-5 o38-6 o38-7 o38-8 o38-1 wire57 wire58 wire59 wire60 wire61 wire62 wire63 wire64)
    (8-or-gate wire1 wire9 wire17 wire25 wire33 wire41 wire49 wire57 out1)
    (8-or-gate wire2 wire10 wire18 wire26 wire34 wire42 wire50 wire58 out2)
    (8-or-gate wire3 wire11 wire19 wire27 wire35 wire43 wire51 wire59 out3)
    (8-or-gate wire4 wire12 wire20 wire28 wire36 wire44 wire52 wire60 out4)
    (8-or-gate wire5 wire13 wire21 wire29 wire37 wire45 wire53 wire61 out5)
    (8-or-gate wire6 wire14 wire22 wire30 wire38 wire46 wire54 wire62 out6)
    (8-or-gate wire7 wire15 wire23 wire31 wire39 wire47 wire55 wire63 out7)
    (8-or-gate wire8 wire16 wire24 wire32 wire40 wire48 wire56 wire64 out8)
    ))

(finally-finish)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;start;;;;;;;;;;;;;;;;;;;
;;;;如输入1000 0000  向右5位 （101）;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(set-signal! data1 1)
(set-signal! ctrl1 1)
(set-signal! ctrl3 1)
(start)
(observe-all)
(observe-all-graphics)
;;;;;;;result;;;;;;;;;;;;;;;
; data1:1
;data2:0
;data3:0
;data4:0
;data5:0
;data6:0
;data7:0
;data8:0
;ctrl1:1
;ctrl2:0
;ctrl3:1
;out1:0
;out2:0
;out3:0
;out4:0
;out5:0
;out6:1
;out7:0
;out8:0
;Value: done;
;;;;;;;;;;;;;;;;;;;;;波形图;;;;;;;;;;;;;;;;;;;;;;
;—_______
;—_—
;_____—__
