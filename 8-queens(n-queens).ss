#lang r5rs
(define input (read))
(define (n-queens num)
  (define (create-list x)
    (if (= 1 x) '((1))
      (cons `(,x) (create-list (- x 1)))))
  (define (correct?-and-filter res)
    (define (correct? i a-list)
      (let ((temp (car a-list)))
       (cond ((= i (length a-list)) #t)
             ((or (= temp (list-ref a-list i)) 
                  (= temp (+ (list-ref a-list i) i))
                  (= temp (- (list-ref a-list i) i)))  #f)
             (else (correct? (+ i 1) a-list)))))
    (if (null? res) '()
      (let ((temp (car res)))
       (cond ((correct? 1 temp) (cons temp (correct?-and-filter (cdr res))))
             (else (correct?-and-filter (cdr res)))))))
  (define (iter cur)
    (cond ((= cur 1) (create-list num))
          (else
            (correct?-and-filter (let ((temp '())) 
                                  (map (lambda (x) (do ((i 1 (+ i 1)))
                                                    ((= i (+ num 1)))
                                                      (set! temp (cons (cons i x) temp)))) 
                                       (iter (- cur 1)))temp)))))
  (iter num))
(define result (n-queens input))
(display result)
